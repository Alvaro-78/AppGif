{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","components/GifApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","console","log","trim","length","cats","className","type","name","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","imgs","setTimeout","GifGridItem","src","alt","GifGrid","GifApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qLA6CeA,EA1CK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACnB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OACI,qCACI,4BAAID,IACJ,uBAAME,SAfO,SAAAC,GACjBA,EAAEC,iBACFC,QAAQC,IAAI,4BAA6BN,GAGrCA,EAAWO,OAAOC,OAAS,IAC3BV,GAAc,SAAAW,GAAI,OAAKT,GAAL,mBAAoBS,OACtCR,EAAc,MAQd,UACI,qBAAKS,UAAU,YAAf,SACI,uBACIC,KAAK,OACLC,KAAK,QACLC,MAAOb,EACPc,SAzBM,SAAAX,GACtBF,EAAcE,EAAEY,OAAOF,YA2Bf,uBACA,wBAAQF,KAAK,SAAb,iC,+BCjBDK,EAjBF,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACRC,EADQ,iDACwCC,UACpDH,GAFY,+DAIKI,MAAMF,GAJX,cAIRG,EAJQ,gBAKSA,EAAKC,OALd,uBAKNC,EALM,EAKNA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXxB,kBAcPM,GAdO,4CAAH,sDCsBEO,EApBM,SAAAf,GACjB,MAA0BlB,mBAAS,CAC/ByB,KAAM,GACNS,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAU,WACNpB,EAAQC,GAAUoB,MAAK,SAAAC,GACnBC,YAAW,WACPJ,EAAS,CACLX,KAAMc,EACNL,SAAS,MAEd,UAER,CAAChB,IAEGiB,GCDIM,EAhBK,SAAC,GAAoB,IAAlBX,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAC5B,OACE,mCACE,sBAAKT,UAAU,yCAAf,UACE,qBAAKA,UAAU,MAAM+B,IAAKtB,EAAKuB,IAAKb,IACpC,mBAAGnB,UAAU,aAAb,SAA2BmB,UCcpBc,EAlBC,SAAC,GAAkB,IAAhB1B,EAAe,EAAfA,SACf,EAAkCe,EAAaf,GAAjCa,EAAd,EAAQN,KAAcS,EAAtB,EAAsBA,QAEtB,OACI,qCACI,oBAAIvB,UAAU,mCAAd,SAAkDO,IACjDgB,GACG,mBAAGvB,UAAU,mCAAb,wBAEJ,qBAAKA,UAAU,YAAf,SACKoB,EAAOJ,KAAI,SAAAC,GAAG,OACX,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aCe3BgB,EA1BA,WACX,MAAoC7C,mBAAS,CAAC,WAA9C,mBAAO8C,EAAP,KAAmB/C,EAAnB,KAEA,OACI,qCACI,qBAAKY,UAAU,eAAf,SACI,8BACI,oBAAIA,UAAU,QAAd,wBAGR,gCACI,8DACA,cAAC,EAAD,CAAaZ,cAAeA,OAEhC,uBAEA,uBACA,6BACK+C,EAAWnB,KAAI,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCjBlC6B,IAASC,OAAO,cAAC,EAAD,IAAYC,SAASC,eAAe,W","file":"static/js/main.4c92274d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = e => {\n        setInputValue(e.target.value);\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        console.log('Llamando al setCategories', inputValue);\n        // Recibimos por props el estado del componente padre y con el spred operator\n        //  le pasamos el nuevo estado con el value del input.\n        if (inputValue.trim().length > 2) {\n            setCategories(cats => [inputValue, ...cats]);\n            setInputValue('');\n        } else {\n        }\n    };\n\n    return (\n        <>\n            <p>{inputValue}</p>\n            <form onSubmit={handleSubmit}>\n                <div className='input-div'>\n                    <input\n                        type='text'\n                        name='input'\n                        value={inputValue}\n                        onChange={handleInputChange}\n                    ></input>\n                </div>\n                <br />\n                <button type='submit'>AÃ±adir...</button>\n            </form>\n        </>\n    );\n};\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","//  encodeURI nos soluciona los errores que pueda dar la url\nconst getGifs = async category => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category,\n  )}&limit=20&api_key=RSnS98lIRy8kdgDH5qUR3kjiSYEtHUk5`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifs = data.map(img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n    };\n  });\n  return gifs;\n};\n\nexport default getGifs;\n","import { useState, useEffect } from 'react';\nimport getGifs from '../helpers/getGifs';\n\nconst useFetchGifs = category => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true,\n    });\n\n    useEffect(() => {\n        getGifs(category).then(imgs => {\n            setTimeout(() => {\n                setState({\n                    data: imgs,\n                    loading: false,\n                });\n            }, 2000);\n        });\n    }, [category]);\n\n    return state;\n};\n\nexport default useFetchGifs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst GifGridItem = ({ title, url }) => {\n  return (\n    <>\n      <div className='card animate__animated animate__fadeIn'>\n        <img className='img' src={url} alt={title}></img>\n        <p className='card-title'>{title}</p>\n      </div>\n    </>\n  );\n};\n\nGifGridItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n};\n\nexport default GifGridItem;\n","import React from 'react';\nimport useFetchGifs from '../hooks/useFetchGifs';\nimport GifGridItem from '../components/GifGridItem';\n\nconst GifGrid = ({ category }) => {\n    const { data: images, loading } = useFetchGifs(category);\n\n    return (\n        <>\n            <h3 className='animate__animated animate__fadeI'>{category}</h3>\n            {loading && (\n                <p className='animate__animated animate__flash'>Loading...</p>\n            )}\n            <div className='card-grid'>\n                {images.map(img => (\n                    <GifGridItem key={img.id} {...img} />\n                ))}\n            </div>\n        </>\n    );\n};\n\nexport default GifGrid;\n","import React, { useState } from 'react';\nimport AddCategory from '../components/AddCategory';\nimport GifGrid from './GifGrid';\n\nconst GifApp = () => {\n    const [categories, setCategories] = useState(['random']);\n\n    return (\n        <>\n            <div className='header-title'>\n                <div>\n                    <h1 className='title'>GifApp</h1>\n                </div>\n            </div>\n            <div>\n                <h2>Encuentra tus Gifs favoritos</h2>\n                <AddCategory setCategories={setCategories} />\n            </div>\n            <br />\n\n            <hr />\n            <ol>\n                {categories.map(category => (\n                    <GifGrid key={category} category={category} />\n                ))}\n            </ol>\n        </>\n    );\n};\n\nexport default GifApp;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport GifApp from '../src/components/GifApp'\n\nimport './index.css'\n\nReactDOM.render(<GifApp />, document.getElementById('root'))\n"],"sourceRoot":""}